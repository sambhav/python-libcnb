{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"libcnb Cloud Native Buildpack API bindings for Python Usage You can install libcnb from PyPi via - pip install libcnb Buildpack Interface According to the CNB specification, the buildpack interface is composed of both a detect and build phase. Each of these phases has a corresponding set of libcnb primitives enable developers to easily implement a buildpack. For more details see the Cloud Native Buildpack Spec Detect Phase The purpose of the detect phase is for buildpacks to declare dependencies that are provided or required for the buildpack to execute. Implementing the detect phase can be achieved by calling the detect function and providing a detector callback to be invoked during that phase. Below is an example of a simple detect phase that provides the \"pip\" dependency and requires the \"python\" dependency. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import libcnb def detector ( context : libcnb . DetectContext ) -> libcnb . DetectResult : # The DetectContext includes an application_dir field that # specifies the location of the application source code. # This field can be combined with other paths to find and # inspect files included in the application source # code that is provided to the buildpack. has_requirements_file = ( context . application_dir / \"requirements.txt\" ) . exists () # Once the existence of a requirements.txt file has been confirmed, # the detect phase can return a result that indicates the provision # of pip and the requirement of python. As can be seen below, # the BuildPlanRequire may also include optional metadata information # such as the the version information for a given requirement. # By default the result is initialized to # `passed` = False and has empty build plans result = libcnb . DetectResult () if has_requirements_file : result . passed = True # The detect phase provides pip and requires python. # When requiring python, it requests a version greater # than 3 as being acceptable by this buildpack. result . plans . append ( libcnb . BuildPlan ( provides = [ libcnb . BuildPlanProvide ( name = \"pip\" ), ], requires = [ libcnb . BuildPlanRequire ( name = \"python\" , metadata = { \"version\" : \">=3\" }, ), ], ) ) return result if __name__ == \"__main__\" : # Calling libcnb.detect with the correct detector libcnb . detect ( detector = detector ) Build Phase The purpose of the build phase is to perform the operation of providing whatever dependencies were declared in the detect phase for the given application code. Implementing the build phase can be achieved by calling the build function and providing a builder callback to be invoked during that phase. Below is an example that adds \"pip\" as a dependency to the application source code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 from pathlib import Path import libcnb def builder ( context : libcnb . BuildContext ) -> libcnb . BuildResult : # The BuildContext includes a BuildpackPlan with entries # that specify a requirement on a dependency provided by # the buildpack. This example simply chooses the first entry, # but more intelligent resolution processes can and likely # should be used in real implementations. entry = context . plan . entries [ 0 ] pip_version = entry . metadata [ \"version\" ] # The BuildContext also provides a mechanism whereby # a layer can be created to store the results of a given # portion of the build process. This example creates a # layer called \"pip\" that will hold the pip cli. # We can also pass `load_all` to `get` set to `True` # to load all the existing layer metadata including env vars # and profile.d scripts if they exist. # Otherwise the layer is loaded only with the layer.metadata # hydrated from the <layer>.toml file. layer = context . layers . get ( \"pip\" , load_all = False ) # libcnb.Layer also provides some handy utilities to check # the expected metadata with the actual metadata and reset # the existing content from cache if it isn't what is expected. expected_metadata = { \"pip_version\" : pip_version } if not layer . compare_metadata ( expected_metadata , exact = False ): # Clear all the existing content of the layer if the # version is not what we expect. layer . reset () layer . metadata = expected_metadata # We can also set env. variables layer . shared_env . default ( \"PIP_INDEX_URL\" , \"http://mypypi.org/simple\" ) # Or add profile.d scripts layer . profile . add ( \"pip.sh\" , \"export PIP_USER=1\" ) _install_pip ( layer . path , pip_version ) # We can also set the layer types and metadata easily layer . launch = True layer . build = True layer . cache = True # After the installation of the pip cli, a BuildResult # can be returned that included details of the executed # BuildpackPlan, the Layers to provide back to the lifecycle # and the Processes to execute at launch. # NOTE - Only the layers provided in the BuildResult will be exported. result = libcnb . BuildResult ( layers = [ layer ], launch_metadata = libcnb . LaunchMetadata ( labels = [ libcnb . Label ( key = \"pip-installed\" , value = \"true\" )], ), ) result . launch_metadata . processes . append ( libcnb . Process ( type_ = \"pip-installer\" , command = \"pip\" , args = [ \"install\" ], direct = False , ) ) # We can also add a bom (Bill of Materials) to the output image. result . launch_metadata . bom . append ( libcnb . BOMEntry ( name = \"pip\" , metadata = { \"version\" : pip_version }, ) ) result . build_metadata . bom . append ( libcnb . BOMEntry ( name = \"pip\" , metadata = { \"version\" : pip_version }, ) ) return result # Executes the process of installing the pip cli. def _install_pip ( layer_path : Path , version : str ) -> None : # Implemention omitted. pass if __name__ == \"__main__\" : libcnb . build ( builder ) Run Buildpacks can be created with a single entrypoint executable using the run function. Here, you can combine both the Detect and Build phases and run will ensure that the correct phase is called when the matching executable is called by the Cloud Native Buildpack Lifecycle. Below is an example that combines a simple detect and build into a single python script. 1 2 3 4 5 6 7 8 9 10 11 12 13 import libcnb def detector ( context : libcnb . DetectContext ) -> libcnb . DetectResult : return libcnb . DetectResult ( passed = True ) def builder ( context : libcnb . BuildContext ) -> libcnb . BuildResult : return libcnb . BuildResult () def main (): libcnb . run ( detector = detector , builder = detector ) if __name__ == \"__main__\" : main () Summary These examples show the very basics of what a buildpack implementation using libcnb might entail. For more details, please consult the API Reference for the types and functions declared within the libcnb package.","title":"Home"},{"location":"#libcnb","text":"Cloud Native Buildpack API bindings for Python","title":"libcnb"},{"location":"#usage","text":"You can install libcnb from PyPi via - pip install libcnb","title":"Usage"},{"location":"#buildpack-interface","text":"According to the CNB specification, the buildpack interface is composed of both a detect and build phase. Each of these phases has a corresponding set of libcnb primitives enable developers to easily implement a buildpack. For more details see the Cloud Native Buildpack Spec","title":"Buildpack Interface"},{"location":"#detect-phase","text":"The purpose of the detect phase is for buildpacks to declare dependencies that are provided or required for the buildpack to execute. Implementing the detect phase can be achieved by calling the detect function and providing a detector callback to be invoked during that phase. Below is an example of a simple detect phase that provides the \"pip\" dependency and requires the \"python\" dependency. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import libcnb def detector ( context : libcnb . DetectContext ) -> libcnb . DetectResult : # The DetectContext includes an application_dir field that # specifies the location of the application source code. # This field can be combined with other paths to find and # inspect files included in the application source # code that is provided to the buildpack. has_requirements_file = ( context . application_dir / \"requirements.txt\" ) . exists () # Once the existence of a requirements.txt file has been confirmed, # the detect phase can return a result that indicates the provision # of pip and the requirement of python. As can be seen below, # the BuildPlanRequire may also include optional metadata information # such as the the version information for a given requirement. # By default the result is initialized to # `passed` = False and has empty build plans result = libcnb . DetectResult () if has_requirements_file : result . passed = True # The detect phase provides pip and requires python. # When requiring python, it requests a version greater # than 3 as being acceptable by this buildpack. result . plans . append ( libcnb . BuildPlan ( provides = [ libcnb . BuildPlanProvide ( name = \"pip\" ), ], requires = [ libcnb . BuildPlanRequire ( name = \"python\" , metadata = { \"version\" : \">=3\" }, ), ], ) ) return result if __name__ == \"__main__\" : # Calling libcnb.detect with the correct detector libcnb . detect ( detector = detector )","title":"Detect Phase"},{"location":"#build-phase","text":"The purpose of the build phase is to perform the operation of providing whatever dependencies were declared in the detect phase for the given application code. Implementing the build phase can be achieved by calling the build function and providing a builder callback to be invoked during that phase. Below is an example that adds \"pip\" as a dependency to the application source code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 from pathlib import Path import libcnb def builder ( context : libcnb . BuildContext ) -> libcnb . BuildResult : # The BuildContext includes a BuildpackPlan with entries # that specify a requirement on a dependency provided by # the buildpack. This example simply chooses the first entry, # but more intelligent resolution processes can and likely # should be used in real implementations. entry = context . plan . entries [ 0 ] pip_version = entry . metadata [ \"version\" ] # The BuildContext also provides a mechanism whereby # a layer can be created to store the results of a given # portion of the build process. This example creates a # layer called \"pip\" that will hold the pip cli. # We can also pass `load_all` to `get` set to `True` # to load all the existing layer metadata including env vars # and profile.d scripts if they exist. # Otherwise the layer is loaded only with the layer.metadata # hydrated from the <layer>.toml file. layer = context . layers . get ( \"pip\" , load_all = False ) # libcnb.Layer also provides some handy utilities to check # the expected metadata with the actual metadata and reset # the existing content from cache if it isn't what is expected. expected_metadata = { \"pip_version\" : pip_version } if not layer . compare_metadata ( expected_metadata , exact = False ): # Clear all the existing content of the layer if the # version is not what we expect. layer . reset () layer . metadata = expected_metadata # We can also set env. variables layer . shared_env . default ( \"PIP_INDEX_URL\" , \"http://mypypi.org/simple\" ) # Or add profile.d scripts layer . profile . add ( \"pip.sh\" , \"export PIP_USER=1\" ) _install_pip ( layer . path , pip_version ) # We can also set the layer types and metadata easily layer . launch = True layer . build = True layer . cache = True # After the installation of the pip cli, a BuildResult # can be returned that included details of the executed # BuildpackPlan, the Layers to provide back to the lifecycle # and the Processes to execute at launch. # NOTE - Only the layers provided in the BuildResult will be exported. result = libcnb . BuildResult ( layers = [ layer ], launch_metadata = libcnb . LaunchMetadata ( labels = [ libcnb . Label ( key = \"pip-installed\" , value = \"true\" )], ), ) result . launch_metadata . processes . append ( libcnb . Process ( type_ = \"pip-installer\" , command = \"pip\" , args = [ \"install\" ], direct = False , ) ) # We can also add a bom (Bill of Materials) to the output image. result . launch_metadata . bom . append ( libcnb . BOMEntry ( name = \"pip\" , metadata = { \"version\" : pip_version }, ) ) result . build_metadata . bom . append ( libcnb . BOMEntry ( name = \"pip\" , metadata = { \"version\" : pip_version }, ) ) return result # Executes the process of installing the pip cli. def _install_pip ( layer_path : Path , version : str ) -> None : # Implemention omitted. pass if __name__ == \"__main__\" : libcnb . build ( builder )","title":"Build Phase"},{"location":"#run","text":"Buildpacks can be created with a single entrypoint executable using the run function. Here, you can combine both the Detect and Build phases and run will ensure that the correct phase is called when the matching executable is called by the Cloud Native Buildpack Lifecycle. Below is an example that combines a simple detect and build into a single python script. 1 2 3 4 5 6 7 8 9 10 11 12 13 import libcnb def detector ( context : libcnb . DetectContext ) -> libcnb . DetectResult : return libcnb . DetectResult ( passed = True ) def builder ( context : libcnb . BuildContext ) -> libcnb . BuildResult : return libcnb . BuildResult () def main (): libcnb . run ( detector = detector , builder = detector ) if __name__ == \"__main__\" : main ()","title":"Run"},{"location":"#summary","text":"These examples show the very basics of what a buildpack implementation using libcnb might entail. For more details, please consult the API Reference for the types and functions declared within the libcnb package.","title":"Summary"},{"location":"api/","text":"API Reference libcnb is a Python language binding of the Cloud Native Buildpacks API. It is a non-opinionated implementation adding language constructs and convenience methods for working with the API. Main Entrypoint The primary entrypoint for the build and detect phases. run ( detector : Callable [[ libcnb . _detect . DetectContext ], libcnb . _detect . DetectResult ], builder : Callable [[ libcnb . _build . BuildContext ], libcnb . _build . BuildResult ]) -> None Combines the invocation of both build and detect into a single entry point. Calling run from an executable with a name matching \"detect\" or \"builder\" will result in the matching detector or builder being called respectively. Parameters: Name Type Description Default detector Callable[[libcnb._detect.DetectContext], libcnb._detect.DetectResult] The definition of a callback that can be invoked when the detect function is executed. Buildpack authors should implement a detector that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a DetectContext and returns a DetectResult. required builder Callable[[libcnb._build.BuildContext], libcnb._build.BuildResult] The definition of a callback that can be invoked when the build function is executed. Buildpack authors should implement a builder that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a BuildContext and returns a BuildResult. required Detection API Classes and functions related to the detect phase. DetectContext pydantic-model DetectContext contains the inputs to detection. Attributes: Name Type Description application_dir Path The location of the application source code as provided by the lifecycle. buildpack Buildpack Metadata about the buildpack, from buildpack.toml. platform Platform The contents of the platform. stack_id str The ID of the stack. DetectResult pydantic-model DetectResult contains the results of detection. Attributes: Name Type Description passed bool Indicates whether detection has passed. plans List[libcnb._plan.BuildPlan] The build plans contributed by the buildpack. detect ( detector : Callable [[ libcnb . _detect . DetectContext ], libcnb . _detect . DetectResult ]) -> None An implementation of the detect phase according to the Cloud Native Buildpacks specification. Parameters: Name Type Description Default detector Callable[[libcnb._detect.DetectContext], libcnb._detect.DetectResult] The definition of a callback that can be invoked when the detect function is executed. Buildpack authors should implement a detector that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a DetectContext and returns a DetectResult. required Build API Classes and functions related to the build phase. BuildContext pydantic-model BuildContext contains the inputs to build. Attributes: Name Type Description application_dir Path The location of the application source code as provided by the lifecycle. buildpack Buildpack Metadata about the buildpack, from buildpack.toml. layers Layers The layers available to the buildpack. Also exposes a convinience function get to create or load a layer in the appropriate layers directory. store Store The metadata that is persisted even across cache cleaning. plan BuildpackPlan The buildpack plan provided to the buildpack. platform Platform The contents of the platform. stack_id str The ID of the stack. BuildResult pydantic-model BuildResult contains the results of build phase. Attributes: Name Type Description layers List[libcnb._layers.Layer] The collection of LayerCreators contributed by the buildpack. store Store The metadata that is persisted even across cache cleaning. launch_metadata LaunchMetadata The metadata that will be exported to launch.toml. Allows configuring labels, processes, slices and BOM for the app image. build_metadata BuildMetadata The metadata that will be exported to build.toml. Allows exporting the build BOM and unmet dependencies. to_path ( self , path : Union [ str , pathlib . Path ]) -> None Exports the build result to the filesystem. Parameters: Name Type Description Default path Union[str, pathlib.Path] Path to the layers directory. required build ( builder : Callable [[ libcnb . _build . BuildContext ], libcnb . _build . BuildResult ]) -> None An implementation of the build phase according to the Cloud Native Buildpacks specification. Parameters: Name Type Description Default builder Callable[[libcnb._build.BuildContext], libcnb._build.BuildResult] The definition of a callback that can be invoked when the build function is executed. Buildpack authors should implement a builder that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a BuildContext and returns a BuildResult. required Outputs Classes and functions binding the various buildpack outputs during the build phase to a Python API. BOMEntry pydantic-model BOMEntry contains a bill of materials entry. Attributes: Name Type Description name str The name of the entry. metadata Dict[str, Any] The optional metadata of the entry. BuildMetadata pydantic-model BuildMetadata represents the contents of build.toml. Attributes: Name Type Description bom List[libcnb._output.BOMEntry] The collection of entries for the bill of materials. unmet List[libcnb._output.UnmetPlanEntry] The collection of buildpack plan entries that should be passed through to subsequent providers. __bool__ ( self ) -> bool special Returns true if there is any content to be written to the output toml file. from_path ( path : Union [ str , pathlib . Path ]) -> BuildMetadata classmethod Creates a BuildMetadata from the TOML file at the given path. to_path ( self , path : Union [ str , pathlib . Path ]) -> None Export LaunchMetadata to the TOML file at the given path. Label pydantic-model Label represents an image label. Attributes: Name Type Description key str The key of the label. value str The value of the label. LaunchMetadata pydantic-model LaunchMetadata represents the contents of launch.toml. Attributes: Name Type Description labels List[libcnb._output.Label] The collection of image labels contributed by the buildpack. processes List[libcnb._output.Process] The collection of process types contributed by the buildpack. slices List[libcnb._output.Slice] The collection of process types contributed by the buildpack. bom List[libcnb._output.BOMEntry] The collection of entries for the bill of materials. __bool__ ( self ) -> bool special Returns true if there is any content to be written to the output toml file. from_path ( path : Union [ str , pathlib . Path ]) -> LaunchMetadata classmethod Creates a LaunchMetadata from the TOML file at the given path. to_path ( self , path : Union [ str , pathlib . Path ]) -> None Export LaunchMetadata to the TOML file at the given path. Process pydantic-model Process represents metadata about a type of command that can be run. Attributes: Name Type Description type_ str The type of the process. command str The command of the process. args List[str] The arguments to the command. direct bool If set to True the command is exec'd directly by the os (no profile.d scripts run). default bool If set to True the process type being defined should be the default process type for the app image. Slice pydantic-model Slice represents metadata about a slice. Attributes: Name Type Description paths List[str] The contents of the slice. Store pydantic-model Store represents the contents of store.toml. Attributes: Name Type Description metadata Dict[str, Any] Represents the persistent metadata. __bool__ ( self ) -> bool special Returns true if there is any content to be written to the output toml file. from_path ( path : Union [ str , pathlib . Path ]) -> Store classmethod Creates a Store from the TOML file at the given path. to_path ( self , path : Union [ str , pathlib . Path ]) -> None Export Store to the TOML file at the given path. UnmetPlanEntry pydantic-model UnmetPlanEntry denotes an unmet buildpack plan entry. When a buildpack returns an UnmetPlanEntry in the BuildResult, any BuildpackPlanEntry with a matching name will be provided to subsequent providers. Attributes: Name Type Description name str The name of the entry. Layers Classes and functions related to layer metadata manipulation. Environment Environment provides a key-value store for declaring environment variables. append ( self , name : str , value : str , delim : str ) -> None Adds a key-value pair to the environment as an appended value. Parameters: Name Type Description Default name str Name of the environment variable. required value str Value of the environment variable to append. required delim str The delimiter to use when appending the value. required default ( self , name : str , value : str ) -> None Adds a key-value pair to the environment as a default value. Parameters: Name Type Description Default name str Name of the environment variable. required value str The default value of the environment variable. required from_path ( env_path : Union [ pathlib . Path , str ]) -> Environment classmethod Loads the environment from the given path on disk. override ( self , name : str , value : str ) -> None Adds a key-value pair to the environment as an overridden value. Parameters: Name Type Description Default name str Name of the environment variable. required value str The overridden value of the environment variable. required prepend ( self , name : str , value : str , delim : str ) -> None Adds a key-value pair to the environment as a prepended value. Parameters: Name Type Description Default name str Name of the environment variable. required value str Value of the environment variable to prepend. required delim str The delimiter to use when preprending the value. required to_path ( self , path : Union [ pathlib . Path , str ]) -> None Exports the environment to the given path on disk. ExecD Exec represents the exec.d layer location. Attributes: Name Type Description path Path The path to the exec.d directory. __init__ ( self , path : Union [ str , pathlib . Path ]) special Initializer for exec.d. file_path ( self , name : str ) -> Path Returns the fully qualified file path for a given name. process_file_path ( self , process : str , name : str ) -> Path Returns the fully qualified file path for a given process type and name. Layer pydantic-model Layer provides a representation of a layer managed by a buildpack. This representation is based on the specification described in https://github.com/buildpacks/spec/blob/main/buildpack.md#layers. Attributes: Name Type Description path Path The absolute location of the layer on disk. name str The descriptive name of the layer. metadata_file Path The aboluste location of the layer content metadata file. build bool Indicates whether the layer is available to subsequent buildpacks during their build phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#build-layers. launch bool Indicates whether the layer is exported into the application image and made available during the launch phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#launch-layers. cache bool Cache indicates whether the layer is persisted and made available to subsequent builds of the same application according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#launch-layers and https://github.com/buildpacks/spec/blob/main/buildpack.md#build-layers. shared_env Environment The set of environment variables attached to the layer and made available during both the build and launch phases according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. build_env Environment The set of environment variables attached to the layer and made available during the build phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. launch_env Environment The set of environment variables attached to the layer and made available during the launch phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. process_launch_envs Dict[str, libcnb._layers.Environment] A dict of environment variables attached to the layer and made available to specified proccesses in the launch phase accoring to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. metadata Dict[str, Any] An unspecified field allowing buildpacks to communicate extra details about the layer. Examples of this type of metadata might include details about what versions of software are included in the layer such that subsequent builds can inspect that metadata and choose to reuse the layer if suitable. The Metadata field ultimately fills the metadata field of the Layer Content Metadata TOML file according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#layer-content-metadata-toml. profile Profile The collection of values to be written into profile.d. process_profiles Dict[str, libcnb._layers.Profile] A dict of process types to the collection of values to be written into profile.d for specific process types. exec_d ExecD The exec.d executables set in the layer. compare_metadata ( self , expected_metadata : Dict [ str , Any ], exact : bool = False ) -> bool Utility method to compare the layer metadata on disk with the expected metadata. Parameters: Name Type Description Default expected_metadata Dict[str, Any] A dict containing the expected metadata. required exact bool If set to true, the actual metadata must exactly match the expected metadata. If set to false, only the keys in expected metadata and their values are checked against the actual metadata. Any extra keys in actual metadata are ignored. False dump ( self ) -> None Exports the layer metadata to disk. load ( self , load_all : bool = False ) -> Layer Loads the layer metadata from disk if it exists. reset ( self ) -> Layer Resets the layer metadata, cleans up the existing layer directory and creates an empty layer. Layers pydantic-model Layers represents the set of layers managed by a buildpack. Attributes: Name Type Description path Path The absolute location of the set of layers managed by a buildpack on disk. get ( self , name : str , load_all : bool = False ) -> Layer Create or load a layer with the given name along with its metadata. Parameters: Name Type Description Default name str Name of the layer to create or load. required load_all bool If set to True, also loads the environment and profile.d values associated with the layer. False Profile Profile is the collection of values to be written into profile.d. add ( self , name : str , value : str ) -> None Adds a profile.d script with a given name and script content. Parameters: Name Type Description Default name str Name of the profile.d script. required value str The script content. required from_path ( profile_path : Union [ pathlib . Path , str ]) -> Profile classmethod Loads a collection of profile.d scripts from disk. to_path ( self , path : Union [ pathlib . Path , str ]) -> None Exports the current collection of profile.d scripts to disk. Buildpack Classes and functions related to the buildpack specific information and metadata. Buildpack pydantic-model Buildpack is the contents of the buildpack.toml file. Attributes: Name Type Description api str The api version expected by the buildpack. info BuildpackInfo Information about the buildpack. path Path The absolute path to the buildpack. stacks List[libcnb._buildpack.BuildpackStack] The collection of stacks supported by the buildpack. metadata Dict[str, Any] Arbitrary metadata attached to the buildpack. order List[libcnb._buildpack.BuildpackOrder] Collection of buildpack order definitions in the buildpack. from_path ( path : Union [ str , pathlib . Path ]) -> Buildpack classmethod Loads the buildpack information given a path on disk. BuildpackGroupEntry pydantic-model BuildpackGroupEntry is a buildpack within in a buildpack order group. Attributes: Name Type Description id str The id of the buildpack. version str The version of the buildpack. optional bool Whether the buildpack is optional within the buildpack group. BuildpackInfo pydantic-model BuildpackInfo is information about the buildpack. Attributes: Name Type Description id str The id of the buildpack. version str The version of the buildpack. name str The name of the buildpack. homepage str The homepage of the buildpack. clear_env bool Clears user-defined environment variables when true on executions of bin/detect and bin/build. description str The string describing the buildpack. keywords List[str] A list of words that are associated with the buildpack. licenses List[libcnb._buildpack.License] A list of buildpack licenses. BuildpackOrder pydantic-model BuildpackOrder is an order definition in the buildpack. Attributes: Name Type Description group List[libcnb._buildpack.BuildpackGroupEntry] The collection of groups within the order. BuildpackStack pydantic-model BuildpackStack is a stack supported by the buildpack. Attributes: Name Type Description id str The id of the stack. mixins List[str] The collection of mixins associated with the stack. License pydantic-model License contains information about a Software License governing the use or redistribution of a buildpack. Attributes: Name Type Description type_ str The identifier for the license. It may use the SPDX 2.1 license expression, but is not limited to identifiers in the SPDX Licenses List. uri str A string that may be specified in lieu of or in addition to type to point to the license if this buildpack is using a nonstandard license. Build Plans Classes and functions binding the various plan I/O during the detect/build phase to a Python API. BuildpackPlan pydantic-model BuildpackPlan represents a buildpack plan input during the build process. Attributes: Name Type Description entries List[libcnb._plan.BuildpackPlanEntry] All the buildpack plan entries. from_path ( path : Union [ pathlib . Path , str ]) -> BuildpackPlan classmethod Loads a buildpack plan from the path to a TOML file. BuildpackPlanEntry pydantic-model BuildpackPlanEntry represents an entry in the buildpack plan. Attributes: Name Type Description name str The name of the entry. metadata Dict[str, Any] The optional metadata of the entry. BuildPlan pydantic-model BuildPlan represents the provisions and requirements of a buildpack during detection. Attributes: Name Type Description provides List[libcnb._plan.BuildPlanProvide] The dependencies provided by the buildpack. requires List[libcnb._plan.BuildPlanRequire] The dependencies required by the buildpack. BuildPlanProvide pydantic-model BuildPlanProvide represents a dependency provided by a buildpack. Attributes: Name Type Description name str The name of the dependency. BuildPlanRequire pydantic-model BuildPlanRequire represents a dependency required by a buildpack. Attributes: Name Type Description name str The name of the dependency. metadata Dict[str, Any] The optional metadata for the dependency. Platform Classes and functions binding the Platform metadata. Platform pydantic-model Platform is the contents of the platform directory. Attributes: Name Type Description path Path The path to the platform directory. env Mapping[str, str] The environment exposed by the platform. from_path ( path : Union [ str , pathlib . Path ]) -> Platform classmethod Construct a Platform object from a given path.","title":"API Reference"},{"location":"api/#api-reference","text":"libcnb is a Python language binding of the Cloud Native Buildpacks API. It is a non-opinionated implementation adding language constructs and convenience methods for working with the API.","title":"API Reference"},{"location":"api/#main-entrypoint","text":"The primary entrypoint for the build and detect phases.","title":"Main Entrypoint"},{"location":"api/#libcnb._run.run","text":"Combines the invocation of both build and detect into a single entry point. Calling run from an executable with a name matching \"detect\" or \"builder\" will result in the matching detector or builder being called respectively. Parameters: Name Type Description Default detector Callable[[libcnb._detect.DetectContext], libcnb._detect.DetectResult] The definition of a callback that can be invoked when the detect function is executed. Buildpack authors should implement a detector that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a DetectContext and returns a DetectResult. required builder Callable[[libcnb._build.BuildContext], libcnb._build.BuildResult] The definition of a callback that can be invoked when the build function is executed. Buildpack authors should implement a builder that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a BuildContext and returns a BuildResult. required","title":"run()"},{"location":"api/#detection-api","text":"Classes and functions related to the detect phase.","title":"Detection API"},{"location":"api/#libcnb._detect.DetectContext","text":"DetectContext contains the inputs to detection. Attributes: Name Type Description application_dir Path The location of the application source code as provided by the lifecycle. buildpack Buildpack Metadata about the buildpack, from buildpack.toml. platform Platform The contents of the platform. stack_id str The ID of the stack.","title":"DetectContext"},{"location":"api/#libcnb._detect.DetectResult","text":"DetectResult contains the results of detection. Attributes: Name Type Description passed bool Indicates whether detection has passed. plans List[libcnb._plan.BuildPlan] The build plans contributed by the buildpack.","title":"DetectResult"},{"location":"api/#libcnb._detect.detect","text":"An implementation of the detect phase according to the Cloud Native Buildpacks specification. Parameters: Name Type Description Default detector Callable[[libcnb._detect.DetectContext], libcnb._detect.DetectResult] The definition of a callback that can be invoked when the detect function is executed. Buildpack authors should implement a detector that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a DetectContext and returns a DetectResult. required","title":"detect()"},{"location":"api/#build-api","text":"Classes and functions related to the build phase.","title":"Build API"},{"location":"api/#libcnb._build.BuildContext","text":"BuildContext contains the inputs to build. Attributes: Name Type Description application_dir Path The location of the application source code as provided by the lifecycle. buildpack Buildpack Metadata about the buildpack, from buildpack.toml. layers Layers The layers available to the buildpack. Also exposes a convinience function get to create or load a layer in the appropriate layers directory. store Store The metadata that is persisted even across cache cleaning. plan BuildpackPlan The buildpack plan provided to the buildpack. platform Platform The contents of the platform. stack_id str The ID of the stack.","title":"BuildContext"},{"location":"api/#libcnb._build.BuildResult","text":"BuildResult contains the results of build phase. Attributes: Name Type Description layers List[libcnb._layers.Layer] The collection of LayerCreators contributed by the buildpack. store Store The metadata that is persisted even across cache cleaning. launch_metadata LaunchMetadata The metadata that will be exported to launch.toml. Allows configuring labels, processes, slices and BOM for the app image. build_metadata BuildMetadata The metadata that will be exported to build.toml. Allows exporting the build BOM and unmet dependencies.","title":"BuildResult"},{"location":"api/#libcnb._build.BuildResult.to_path","text":"Exports the build result to the filesystem. Parameters: Name Type Description Default path Union[str, pathlib.Path] Path to the layers directory. required","title":"to_path()"},{"location":"api/#libcnb._build.build","text":"An implementation of the build phase according to the Cloud Native Buildpacks specification. Parameters: Name Type Description Default builder Callable[[libcnb._build.BuildContext], libcnb._build.BuildResult] The definition of a callback that can be invoked when the build function is executed. Buildpack authors should implement a builder that performs the specific detect phase operations for a buildpack. It should be a callable that takes in a BuildContext and returns a BuildResult. required","title":"build()"},{"location":"api/#outputs","text":"Classes and functions binding the various buildpack outputs during the build phase to a Python API.","title":"Outputs"},{"location":"api/#libcnb._output.BOMEntry","text":"BOMEntry contains a bill of materials entry. Attributes: Name Type Description name str The name of the entry. metadata Dict[str, Any] The optional metadata of the entry.","title":"BOMEntry"},{"location":"api/#libcnb._output.BuildMetadata","text":"BuildMetadata represents the contents of build.toml. Attributes: Name Type Description bom List[libcnb._output.BOMEntry] The collection of entries for the bill of materials. unmet List[libcnb._output.UnmetPlanEntry] The collection of buildpack plan entries that should be passed through to subsequent providers.","title":"BuildMetadata"},{"location":"api/#libcnb._output.BuildMetadata.__bool__","text":"Returns true if there is any content to be written to the output toml file.","title":"__bool__()"},{"location":"api/#libcnb._output.BuildMetadata.from_path","text":"Creates a BuildMetadata from the TOML file at the given path.","title":"from_path()"},{"location":"api/#libcnb._output.BuildMetadata.to_path","text":"Export LaunchMetadata to the TOML file at the given path.","title":"to_path()"},{"location":"api/#libcnb._output.Label","text":"Label represents an image label. Attributes: Name Type Description key str The key of the label. value str The value of the label.","title":"Label"},{"location":"api/#libcnb._output.LaunchMetadata","text":"LaunchMetadata represents the contents of launch.toml. Attributes: Name Type Description labels List[libcnb._output.Label] The collection of image labels contributed by the buildpack. processes List[libcnb._output.Process] The collection of process types contributed by the buildpack. slices List[libcnb._output.Slice] The collection of process types contributed by the buildpack. bom List[libcnb._output.BOMEntry] The collection of entries for the bill of materials.","title":"LaunchMetadata"},{"location":"api/#libcnb._output.LaunchMetadata.__bool__","text":"Returns true if there is any content to be written to the output toml file.","title":"__bool__()"},{"location":"api/#libcnb._output.LaunchMetadata.from_path","text":"Creates a LaunchMetadata from the TOML file at the given path.","title":"from_path()"},{"location":"api/#libcnb._output.LaunchMetadata.to_path","text":"Export LaunchMetadata to the TOML file at the given path.","title":"to_path()"},{"location":"api/#libcnb._output.Process","text":"Process represents metadata about a type of command that can be run. Attributes: Name Type Description type_ str The type of the process. command str The command of the process. args List[str] The arguments to the command. direct bool If set to True the command is exec'd directly by the os (no profile.d scripts run). default bool If set to True the process type being defined should be the default process type for the app image.","title":"Process"},{"location":"api/#libcnb._output.Slice","text":"Slice represents metadata about a slice. Attributes: Name Type Description paths List[str] The contents of the slice.","title":"Slice"},{"location":"api/#libcnb._output.Store","text":"Store represents the contents of store.toml. Attributes: Name Type Description metadata Dict[str, Any] Represents the persistent metadata.","title":"Store"},{"location":"api/#libcnb._output.Store.__bool__","text":"Returns true if there is any content to be written to the output toml file.","title":"__bool__()"},{"location":"api/#libcnb._output.Store.from_path","text":"Creates a Store from the TOML file at the given path.","title":"from_path()"},{"location":"api/#libcnb._output.Store.to_path","text":"Export Store to the TOML file at the given path.","title":"to_path()"},{"location":"api/#libcnb._output.UnmetPlanEntry","text":"UnmetPlanEntry denotes an unmet buildpack plan entry. When a buildpack returns an UnmetPlanEntry in the BuildResult, any BuildpackPlanEntry with a matching name will be provided to subsequent providers. Attributes: Name Type Description name str The name of the entry.","title":"UnmetPlanEntry"},{"location":"api/#layers","text":"Classes and functions related to layer metadata manipulation.","title":"Layers"},{"location":"api/#libcnb._layers.Environment","text":"Environment provides a key-value store for declaring environment variables.","title":"Environment"},{"location":"api/#libcnb._layers.Environment.append","text":"Adds a key-value pair to the environment as an appended value. Parameters: Name Type Description Default name str Name of the environment variable. required value str Value of the environment variable to append. required delim str The delimiter to use when appending the value. required","title":"append()"},{"location":"api/#libcnb._layers.Environment.default","text":"Adds a key-value pair to the environment as a default value. Parameters: Name Type Description Default name str Name of the environment variable. required value str The default value of the environment variable. required","title":"default()"},{"location":"api/#libcnb._layers.Environment.from_path","text":"Loads the environment from the given path on disk.","title":"from_path()"},{"location":"api/#libcnb._layers.Environment.override","text":"Adds a key-value pair to the environment as an overridden value. Parameters: Name Type Description Default name str Name of the environment variable. required value str The overridden value of the environment variable. required","title":"override()"},{"location":"api/#libcnb._layers.Environment.prepend","text":"Adds a key-value pair to the environment as a prepended value. Parameters: Name Type Description Default name str Name of the environment variable. required value str Value of the environment variable to prepend. required delim str The delimiter to use when preprending the value. required","title":"prepend()"},{"location":"api/#libcnb._layers.Environment.to_path","text":"Exports the environment to the given path on disk.","title":"to_path()"},{"location":"api/#libcnb._layers.ExecD","text":"Exec represents the exec.d layer location. Attributes: Name Type Description path Path The path to the exec.d directory.","title":"ExecD"},{"location":"api/#libcnb._layers.ExecD.__init__","text":"Initializer for exec.d.","title":"__init__()"},{"location":"api/#libcnb._layers.ExecD.file_path","text":"Returns the fully qualified file path for a given name.","title":"file_path()"},{"location":"api/#libcnb._layers.ExecD.process_file_path","text":"Returns the fully qualified file path for a given process type and name.","title":"process_file_path()"},{"location":"api/#libcnb._layers.Layer","text":"Layer provides a representation of a layer managed by a buildpack. This representation is based on the specification described in https://github.com/buildpacks/spec/blob/main/buildpack.md#layers. Attributes: Name Type Description path Path The absolute location of the layer on disk. name str The descriptive name of the layer. metadata_file Path The aboluste location of the layer content metadata file. build bool Indicates whether the layer is available to subsequent buildpacks during their build phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#build-layers. launch bool Indicates whether the layer is exported into the application image and made available during the launch phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#launch-layers. cache bool Cache indicates whether the layer is persisted and made available to subsequent builds of the same application according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#launch-layers and https://github.com/buildpacks/spec/blob/main/buildpack.md#build-layers. shared_env Environment The set of environment variables attached to the layer and made available during both the build and launch phases according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. build_env Environment The set of environment variables attached to the layer and made available during the build phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. launch_env Environment The set of environment variables attached to the layer and made available during the launch phase according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. process_launch_envs Dict[str, libcnb._layers.Environment] A dict of environment variables attached to the layer and made available to specified proccesses in the launch phase accoring to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#provided-by-the-buildpacks. metadata Dict[str, Any] An unspecified field allowing buildpacks to communicate extra details about the layer. Examples of this type of metadata might include details about what versions of software are included in the layer such that subsequent builds can inspect that metadata and choose to reuse the layer if suitable. The Metadata field ultimately fills the metadata field of the Layer Content Metadata TOML file according to the specification: https://github.com/buildpacks/spec/blob/main/buildpack.md#layer-content-metadata-toml. profile Profile The collection of values to be written into profile.d. process_profiles Dict[str, libcnb._layers.Profile] A dict of process types to the collection of values to be written into profile.d for specific process types. exec_d ExecD The exec.d executables set in the layer.","title":"Layer"},{"location":"api/#libcnb._layers.Layer.compare_metadata","text":"Utility method to compare the layer metadata on disk with the expected metadata. Parameters: Name Type Description Default expected_metadata Dict[str, Any] A dict containing the expected metadata. required exact bool If set to true, the actual metadata must exactly match the expected metadata. If set to false, only the keys in expected metadata and their values are checked against the actual metadata. Any extra keys in actual metadata are ignored. False","title":"compare_metadata()"},{"location":"api/#libcnb._layers.Layer.dump","text":"Exports the layer metadata to disk.","title":"dump()"},{"location":"api/#libcnb._layers.Layer.load","text":"Loads the layer metadata from disk if it exists.","title":"load()"},{"location":"api/#libcnb._layers.Layer.reset","text":"Resets the layer metadata, cleans up the existing layer directory and creates an empty layer.","title":"reset()"},{"location":"api/#libcnb._layers.Layers","text":"Layers represents the set of layers managed by a buildpack. Attributes: Name Type Description path Path The absolute location of the set of layers managed by a buildpack on disk.","title":"Layers"},{"location":"api/#libcnb._layers.Layers.get","text":"Create or load a layer with the given name along with its metadata. Parameters: Name Type Description Default name str Name of the layer to create or load. required load_all bool If set to True, also loads the environment and profile.d values associated with the layer. False","title":"get()"},{"location":"api/#libcnb._layers.Profile","text":"Profile is the collection of values to be written into profile.d.","title":"Profile"},{"location":"api/#libcnb._layers.Profile.add","text":"Adds a profile.d script with a given name and script content. Parameters: Name Type Description Default name str Name of the profile.d script. required value str The script content. required","title":"add()"},{"location":"api/#libcnb._layers.Profile.from_path","text":"Loads a collection of profile.d scripts from disk.","title":"from_path()"},{"location":"api/#libcnb._layers.Profile.to_path","text":"Exports the current collection of profile.d scripts to disk.","title":"to_path()"},{"location":"api/#buildpack","text":"Classes and functions related to the buildpack specific information and metadata.","title":"Buildpack"},{"location":"api/#libcnb._buildpack.Buildpack","text":"Buildpack is the contents of the buildpack.toml file. Attributes: Name Type Description api str The api version expected by the buildpack. info BuildpackInfo Information about the buildpack. path Path The absolute path to the buildpack. stacks List[libcnb._buildpack.BuildpackStack] The collection of stacks supported by the buildpack. metadata Dict[str, Any] Arbitrary metadata attached to the buildpack. order List[libcnb._buildpack.BuildpackOrder] Collection of buildpack order definitions in the buildpack.","title":"Buildpack"},{"location":"api/#libcnb._buildpack.Buildpack.from_path","text":"Loads the buildpack information given a path on disk.","title":"from_path()"},{"location":"api/#libcnb._buildpack.BuildpackGroupEntry","text":"BuildpackGroupEntry is a buildpack within in a buildpack order group. Attributes: Name Type Description id str The id of the buildpack. version str The version of the buildpack. optional bool Whether the buildpack is optional within the buildpack group.","title":"BuildpackGroupEntry"},{"location":"api/#libcnb._buildpack.BuildpackInfo","text":"BuildpackInfo is information about the buildpack. Attributes: Name Type Description id str The id of the buildpack. version str The version of the buildpack. name str The name of the buildpack. homepage str The homepage of the buildpack. clear_env bool Clears user-defined environment variables when true on executions of bin/detect and bin/build. description str The string describing the buildpack. keywords List[str] A list of words that are associated with the buildpack. licenses List[libcnb._buildpack.License] A list of buildpack licenses.","title":"BuildpackInfo"},{"location":"api/#libcnb._buildpack.BuildpackOrder","text":"BuildpackOrder is an order definition in the buildpack. Attributes: Name Type Description group List[libcnb._buildpack.BuildpackGroupEntry] The collection of groups within the order.","title":"BuildpackOrder"},{"location":"api/#libcnb._buildpack.BuildpackStack","text":"BuildpackStack is a stack supported by the buildpack. Attributes: Name Type Description id str The id of the stack. mixins List[str] The collection of mixins associated with the stack.","title":"BuildpackStack"},{"location":"api/#libcnb._buildpack.License","text":"License contains information about a Software License governing the use or redistribution of a buildpack. Attributes: Name Type Description type_ str The identifier for the license. It may use the SPDX 2.1 license expression, but is not limited to identifiers in the SPDX Licenses List. uri str A string that may be specified in lieu of or in addition to type to point to the license if this buildpack is using a nonstandard license.","title":"License"},{"location":"api/#build-plans","text":"Classes and functions binding the various plan I/O during the detect/build phase to a Python API.","title":"Build Plans"},{"location":"api/#libcnb._plan.BuildpackPlan","text":"BuildpackPlan represents a buildpack plan input during the build process. Attributes: Name Type Description entries List[libcnb._plan.BuildpackPlanEntry] All the buildpack plan entries.","title":"BuildpackPlan"},{"location":"api/#libcnb._plan.BuildpackPlan.from_path","text":"Loads a buildpack plan from the path to a TOML file.","title":"from_path()"},{"location":"api/#libcnb._plan.BuildpackPlanEntry","text":"BuildpackPlanEntry represents an entry in the buildpack plan. Attributes: Name Type Description name str The name of the entry. metadata Dict[str, Any] The optional metadata of the entry.","title":"BuildpackPlanEntry"},{"location":"api/#libcnb._plan.BuildPlan","text":"BuildPlan represents the provisions and requirements of a buildpack during detection. Attributes: Name Type Description provides List[libcnb._plan.BuildPlanProvide] The dependencies provided by the buildpack. requires List[libcnb._plan.BuildPlanRequire] The dependencies required by the buildpack.","title":"BuildPlan"},{"location":"api/#libcnb._plan.BuildPlanProvide","text":"BuildPlanProvide represents a dependency provided by a buildpack. Attributes: Name Type Description name str The name of the dependency.","title":"BuildPlanProvide"},{"location":"api/#libcnb._plan.BuildPlanRequire","text":"BuildPlanRequire represents a dependency required by a buildpack. Attributes: Name Type Description name str The name of the dependency. metadata Dict[str, Any] The optional metadata for the dependency.","title":"BuildPlanRequire"},{"location":"api/#platform","text":"Classes and functions binding the Platform metadata.","title":"Platform"},{"location":"api/#libcnb._platform.Platform","text":"Platform is the contents of the platform directory. Attributes: Name Type Description path Path The path to the platform directory. env Mapping[str, str] The environment exposed by the platform.","title":"Platform"},{"location":"api/#libcnb._platform.Platform.from_path","text":"Construct a Platform object from a given path.","title":"from_path()"}]}